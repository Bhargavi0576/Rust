//Array and slices program

use std::mem;

fn print_slice(slice: &[i32]) {
    println!("the slice has {} elements", slice.len());
    println!("Slice = {:?}",slice);
}

fn main() {
    let xs: [i32; 8] = [1,2,3,4,5,6,-1,-3];
    //let ys: [i32; 500] = [0; 500]; -> Initialize all elements with same value

    println!("number of elements in array: {}", xs.len());

    // Arrays are stack allocated - displays memory occupied
    println!("array occupies {} bytes", mem::size_of_val(&xs));
    
    println!("borrow whole array as a slice");
    print_slice(&xs);
    
    println!("borrow a section of the array as a slice");
    print_slice(&xs[1 .. 4]);
    
    println!("Iterate array elements");
    for i in xs.iter(){
        print!("{} ",i);
    }
    println!();
    let mut sum=0;
    println!("Iterate for Slice of array");
    for i in xs[1..5].iter(){
        print!("{} ",i);
        sum+=i;
    }
    println!();
    println!("Sum of sliced elements = {} ",sum);
}
